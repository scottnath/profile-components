{
  "type_of": "article",
  "id": 1471624,
  "title": "Running a local multi-framework composition Storybook",
  "description": "How to run a local multi-framework composition Storybook instance with one command          ...",
  "readable_publish_date": "May 17",
  "slug": "running-a-local-multi-framework-composition-storybook-506l",
  "path": "/scottnath/running-a-local-multi-framework-composition-storybook-506l",
  "url": "https://dev.to/scottnath/running-a-local-multi-framework-composition-storybook-506l",
  "comments_count": 0,
  "public_reactions_count": 2,
  "collection_id": 23124,
  "published_timestamp": "2023-05-17T22:39:54Z",
  "positive_reactions_count": 2,
  "cover_image": "https://res.cloudinary.com/practicaldev/image/fetch/s--vyFzl9Ml--/c_imagga_scale,f_auto,fl_progressive,h_420,q_auto,w_1000/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jv4luam96ya9sxsjotjx.png",
  "social_image": "https://res.cloudinary.com/practicaldev/image/fetch/s--HJA-rw9l--/c_imagga_scale,f_auto,fl_progressive,h_500,q_auto,w_1000/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jv4luam96ya9sxsjotjx.png",
  "canonical_url": "https://scottnath.com/blahg/multi-framework-composition-storybook-local/",
  "created_at": "2023-05-17T22:39:55Z",
  "edited_at": "2023-05-25T16:13:04Z",
  "crossposted_at": null,
  "published_at": "2023-05-17T22:39:54Z",
  "last_comment_at": "2023-05-17T22:39:54Z",
  "reading_time_minutes": 5,
  "tag_list": "storybook, javascript, frontend, node",
  "tags": [
    "storybook",
    "javascript",
    "frontend",
    "node"
  ],
  "body_html": "<p>How to run a local multi-framework composition Storybook instance with one command</p>\n\n<h2>\n  <a name=\"tldr\" href=\"#tldr\">\n  </a>\n  tl;dr\n</h2>\n\n<p><strong>problem</strong>: we can't compose multiple Storybooks in the same process without getting CORS errors</p>\n\n<p><strong>typical solution</strong>: run one storybook, open a new terminal tab, run the next, new tab, start the main composed storybook</p>\n\n<p><strong>one-tab solution</strong>: Use <code>concurrently</code> and <code>wait-on</code> to run multiple Storybooks in one terminal tab.</p>\n\n<p>See this <a href=\"https://github.com/storydocker/storydocker-examples/tree/main/experimental/astro-framework-multiple\">example of a multi-framework composition Storybook</a> for working code.</p>\n\n<h2>\n  <a name=\"prerequisite-knowledge\" href=\"#prerequisite-knowledge\">\n  </a>\n  Prerequisite knowledge\n</h2>\n\n<ul>\n<li><a href=\"https://storybook.js.org/docs/react/sharing/storybook-composition\">Storybook Composition</a></li>\n</ul>\n\n<p><strong>note</strong>: This article is specific to running Storybook <em>locally</em>.</p>\n\n<h2>\n  <a name=\"problem-storybook-composition-cors-bugs\" href=\"#problem-storybook-composition-cors-bugs\">\n  </a>\n  Problem: Storybook Composition CORS bugs\n</h2>\n\n<p>The most common errors when using Storybook Composition seem to be related to CORS (Cross-Origin Resource Sharing). You can see how often CORS is mentioned when <a href=\"https://github.com/search?q=repo%3Astorybookjs%2Fstorybook+cors+composition&amp;type=issues\">searching Storybook's GitHub repo's issues for CORS + Composition</a>.</p>\n\n<p>Basically, if the parent Storybook (the Storybook instance which references the child Storybooks) is started before the child Storybooks have <em>completely launched and are viewable in browser</em>, then the parent Storybook will throw CORS errors. The CORS errors will block the parent Storybook from loading the child Storybooks. No clear fix has been found for this issue - and I've tried a bunch.</p>\n\n<p>The common solution is to use multiple terminal windows and wait for the child Storybooks to be fully launched before starting the parent Storybook. </p>\n\n<p>Why do we have to do it that way?</p>\n\n<p>See: ⬇️</p>\n\n<h2>\n  <a name=\"nodejs-is-singlethreaded-\" href=\"#nodejs-is-singlethreaded-\">\n  </a>\n  NodeJS is single-threaded ...\n</h2>\n\n<p>When running a script in a NodeJS process, it is the only script which can run in that process at that time. So, if you're in a terminal window you cannot run another script in that window until the first script has finished. </p>\n\n<h2>\n  <a name=\"-and-storybook-composition-requires-waiting\" href=\"#-and-storybook-composition-requires-waiting\">\n  </a>\n  ... and Storybook composition requires waiting\n</h2>\n\n<p>When running Storybook locally in dev mode, it does not exit or otherwise programatically indicate that Storybook has started. A composed Storybook should not start until the child Storybooks are running. But using scripts like <code>concurrently</code> or <code>npm-run-all</code> has not consistently worked for me <em>when the parent/composed Storybook instance is in the list of scripts running concurrently</em>.</p>\n\n<p>Of course, you can open a new tab/terminal window for each command, but that means all users of your repo need to know that trick too. Inefficient!</p>\n\n<p>The following is a solution that works consistently with a single NPM script.</p>\n\n<h2>\n  <a name=\"example-code\" href=\"#example-code\">\n  </a>\n  Example code\n</h2>\n\n<h3>\n  <a name=\"astros-kitchen-sink\" href=\"#astros-kitchen-sink\">\n  </a>\n  Astro's Kitchen Sink\n</h3>\n\n<p>We'll be using Astro's <a href=\"https://github.com/withastro/astro/tree/latest/examples/framework-multiple\">Kitchen Sink: Microfrontends with Astro</a>, which showcases Astro's built-in support for multiple frameworks (React, Preact, Svelte, and Vue (<code>v3.x</code>)). This a multi-framework application, meaning it can use components from multiple JS frameworks in the UI - very cool!</p>\n\n<h3>\n  <a name=\"storydockerstorybook\" href=\"#storydockerstorybook\">\n  </a>\n  StoryDocker-storybook\n</h3>\n\n<p>We'll be adding <a href=\"https://github.com/storydocker/storydocker\">StoryDocker</a>'s module <a href=\"https://www.npmjs.com/package/storydocker-storybook\">StoryDocker-storybook</a> which injects the typical dependencies needed to set up Storybook. </p>\n\n<h3>\n  <a name=\"working-codebase-on-github\" href=\"#working-codebase-on-github\">\n  </a>\n  Working codebase on GitHub\n</h3>\n\n<p>The code referenced is available on GitHub via <a href=\"https://github.com/storydocker/storydocker-examples/tree/main/experimental/astro-framework-multiple\">the astro-framework-multiple example</a> in the StoryDocker-examples repo.</p>\n\n<h2>\n  <a name=\"steps-to-compose-storybooks-locally\" href=\"#steps-to-compose-storybooks-locally\">\n  </a>\n  Steps to compose Storybooks locally\n</h2>\n\n<h3>\n  <a name=\"step-1-start-up-the-child-storybooks-in-parallel\" href=\"#step-1-start-up-the-child-storybooks-in-parallel\">\n  </a>\n  Step 1: Start up the child Storybook(s) in parallel\n</h3>\n\n<p>We'll be using <code>concurrently</code>, an NPM module which allows running multiple commands at the same time. (<a href=\"https://www.npmjs.com/package/concurrently\">Concurrently on npmjs</a>)</p>\n\n<p>The child Storybooks don't need to know each other exist, so they can be started at the same time.</p>\n\n<p>Using <code>concurrently</code>, we'll run each child-Storybook in parallel. </p>\n\n<h4>\n  <a name=\"step-1a-running-one-child-storybook\" href=\"#step-1a-running-one-child-storybook\">\n  </a>\n  Step 1.a: Running one child Storybook\n</h4>\n\n<p>This command will run one child Storybook:</p>\n\n<p><code>npm run storybook -- --config-dir .framework-storybooks/.storybook-preact --port 6001 --no-open</code></p>\n\n<p>Let's break down that command:</p>\n\n<p><code>npm run storybook</code> is the command to run Storybook via the NPM script <code>storybook</code> in <code>package.json</code>. That script is calling the <a href=\"https://storybook.js.org/docs/react/api/cli-options\">Storybook CLI</a> with the command <code>storybook dev</code>.</p>\n\n<p><code>--</code> the extra double-dashes allow us to send flags-and-options directly to <code>storybook dev</code></p>\n\n<p><code>--config-dir .framework-storybooks/.storybook-preact</code> is the command to run Storybook with the <code>preact</code>-specific configuration found in the local directory</p>\n\n<p><code>--port 6001</code> is the command to run Storybook on port <code>6001</code></p>\n\n<p><code>--no-open</code> tells Storybook to not open a browser window when it starts.</p>\n\n<p>So, all that means we're starting a Storybook instance using the configuration found in <code>.framework-storybooks/.storybook-preact</code> and we're running it on port <code>6001</code> and telling Storybook to skip it's default behavior of opening a browser window.</p>\n\n<h4>\n  <a name=\"step-1b-the-other-child-storybooks\" href=\"#step-1b-the-other-child-storybooks\">\n  </a>\n  Step 1.b: The other child Storybooks\n</h4>\n\n<p>The example code has 3 other child Storybooks, so we'll need to run those too. They are:</p>\n\n<p>React: <code>npm run storybook -- --config-dir .framework-storybooks/.storybook-react --port 6002 --no-open</code></p>\n\n<p>Svelte: <code>npm run storybook -- --config-dir .framework-storybooks/.storybook-svelte --port 6003 --no-open</code></p>\n\n<p>Vue: <code>npm run storybook -- --config-dir .framework-storybooks/.storybook-vue --port 6004 --no-open</code></p>\n\n<h4>\n  <a name=\"step-1c-running-all-child-storybooks-in-parallel\" href=\"#step-1c-running-all-child-storybooks-in-parallel\">\n  </a>\n  Step 1.c: Running all child Storybooks in parallel\n</h4>\n\n<p>Putting them together, we'll run all the child Storybooks in parallel using <code>concurrently</code>. This is the NPM script we'll use:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight json\"><code><span class=\"nl\">\"sbook-children\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"npx concurrently </span><span class=\"se\">\\\"</span><span class=\"s2\">npm run storybook -- --config-dir .framework-storybooks/.storybook-preact --port 6001 --no-open</span><span class=\"se\">\\\"</span><span class=\"s2\">  </span><span class=\"se\">\\\"</span><span class=\"s2\">npm run storybook -- --config-dir .framework-storybooks/.storybook-react --port 6002 --no-open</span><span class=\"se\">\\\"</span><span class=\"s2\"> </span><span class=\"se\">\\\"</span><span class=\"s2\">npm run storybook -- --config-dir .framework-storybooks/.storybook-svelte --port 6003 --no-open</span><span class=\"se\">\\\"</span><span class=\"s2\"> </span><span class=\"se\">\\\"</span><span class=\"s2\">npm run storybook -- --config-dir .framework-storybooks/.storybook-vue --port 6004 --no-open</span><span class=\"se\">\\\"</span><span class=\"s2\">\"</span><span class=\"err\">,</span><span class=\"w\">\n</span></code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<p>Running <code>npm run sbook-children</code> will start all the child Storybooks in parallel. We use <code>npx</code> instead of <code>npm</code> so we can avoid adding <code>concurrently</code> as a dependency.</p>\n\n<h3>\n  <a name=\"step-2-run-the-parent-storybook\" href=\"#step-2-run-the-parent-storybook\">\n  </a>\n  Step 2: Run the parent Storybook\n</h3>\n\n<p>We do not want to start the parent Storybook until all the child Storybooks are running and viewable in browser.</p>\n\n<h4>\n  <a name=\"step-2a-the-parent-storybook\" href=\"#step-2a-the-parent-storybook\">\n  </a>\n  Step 2.a: The parent Storybook\n</h4>\n\n<p>The main composed Storybook is configured like a normal Storybook within the <code>.storybook</code> directory. The only addition is the <a href=\"https://github.com/storydocker/storydocker-examples/blob/main/experimental/astro-framework-multiple/.storybook/refs.js\"><code>refs.js</code> file</a> which is imported by <code>main.js</code> and contains the references to the child Storybooks. The contents of <code>refs.js</code> are:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>export default {\n  \"astro_preact\": {\n    \"title\": \"preact\",\n    \"url\": \"http://localhost:6001\",\n  },\n  \"astro_react\": {\n    \"title\": \"react\",\n    \"url\": \"http://localhost:6002\",\n  },\n  \"astro_svelte\": {\n    \"title\": \"svelte\",\n    \"url\": \"http://localhost:6003\",\n  },\n  \"astro_vue\": {\n    \"title\": \"vue\",\n    \"url\": \"http://localhost:6004\",\n  },\n}\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<h4>\n  <a name=\"step-2b-waiting-on-one-child-storybook\" href=\"#step-2b-waiting-on-one-child-storybook\">\n  </a>\n  Step 2.b: Waiting on one child Storybook\n</h4>\n\n<p>We'll use <code>wait-on</code>, an NPM module which stops Node from continuing a process until a condition is met. In this case, <code>wait-on</code> is going to check for each <code>localhost</code> port to be open before continuing. (<a href=\"https://www.npmjs.com/package/wait-on\">wait-on on npmjs</a>)</p>\n\n<p>This command: </p>\n\n<p><code>npx wait-on http://localhost:6001</code></p>\n\n<p>will wait until <code>localhost:6001</code> is open and returns a <code>2xx</code> response before continuing. </p>\n\n<p>Port <code>6001</code> is the Storybook for Preact.</p>\n\n<h4>\n  <a name=\"step-2c-waiting-on-all-child-storybooks\" href=\"#step-2c-waiting-on-all-child-storybooks\">\n  </a>\n  Step 2.c: Waiting on all child Storybooks\n</h4>\n\n<p>We'll be adding a double-ampersand in between each localhost check, which means <code>wait-on</code> will wait for each port <em>sequentially</em>. After all the <code>wait-on</code>s, we'll start Storybook with <code>npm run storybook</code>.</p>\n\n<p>The following NPM script will wait for all the child Storybooks to be open before continuing to open the parent Storybook.<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight json\"><code><span class=\"nl\">\"sbook-parent\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"npx wait-on http://localhost:6001 &amp;&amp; npx wait-on http://localhost:6002 &amp;&amp; npx wait-on http://localhost:6003  &amp;&amp; npx wait-on http://localhost:6004 &amp;&amp; npm run storybook\"</span><span class=\"err\">,</span><span class=\"w\">\n</span></code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<h3>\n  <a name=\"step-3-single-command-to-run-all-storybooks\" href=\"#step-3-single-command-to-run-all-storybooks\">\n  </a>\n  Step 3: Single command to run all Storybooks\n</h3>\n\n<p>Using <code>concurrently</code> again, we'll run both the child and parent NPM scripts:</p>\n\n<p><code>npx concurrently \"npm run sbook-children\" \"npm run sbook-parent\"</code></p>\n\n<p>and the NPM script in package.json:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight json\"><code><span class=\"nl\">\"sbook\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"npx concurrently </span><span class=\"se\">\\\"</span><span class=\"s2\">npm run sbook-children</span><span class=\"se\">\\\"</span><span class=\"s2\"> </span><span class=\"se\">\\\"</span><span class=\"s2\">npm run sbook-parent</span><span class=\"se\">\\\"</span><span class=\"s2\">\"</span><span class=\"w\">\n</span></code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<h3>\n  <a name=\"step-4-profit\" href=\"#step-4-profit\">\n  </a>\n  Step 4: Profit!\n</h3>\n\n<p>Happy coding folks!</p>\n\n",
  "body_markdown": "\nHow to run a local multi-framework composition Storybook instance with one command\n\n## tl;dr\n\n**problem**: we can't compose multiple Storybooks in the same process without getting CORS errors\n\n**typical solution**: run one storybook, open a new terminal tab, run the next, new tab, start the main composed storybook\n\n**one-tab solution**: Use `concurrently` and `wait-on` to run multiple Storybooks in one terminal tab.\n\nSee this [example of a multi-framework composition Storybook](https://github.com/storydocker/storydocker-examples/tree/main/experimental/astro-framework-multiple) for working code.\n\n## Prerequisite knowledge\n\n- [Storybook Composition](https://storybook.js.org/docs/react/sharing/storybook-composition)\n\n**note**: This article is specific to running Storybook _locally_.\n\n## Problem: Storybook Composition CORS bugs\n\nThe most common errors when using Storybook Composition seem to be related to CORS (Cross-Origin Resource Sharing). You can see how often CORS is mentioned when [searching Storybook's GitHub repo's issues for CORS + Composition](https://github.com/search?q=repo%3Astorybookjs%2Fstorybook+cors+composition&type=issues).\n\nBasically, if the parent Storybook (the Storybook instance which references the child Storybooks) is started before the child Storybooks have _completely launched and are viewable in browser_, then the parent Storybook will throw CORS errors. The CORS errors will block the parent Storybook from loading the child Storybooks. No clear fix has been found for this issue - and I've tried a bunch.\n\nThe common solution is to use multiple terminal windows and wait for the child Storybooks to be fully launched before starting the parent Storybook. \n\nWhy do we have to do it that way?\n\nSee: ⬇️\n\n## NodeJS is single-threaded ...\n\nWhen running a script in a NodeJS process, it is the only script which can run in that process at that time. So, if you're in a terminal window you cannot run another script in that window until the first script has finished. \n\n## ... and Storybook composition requires waiting\n\nWhen running Storybook locally in dev mode, it does not exit or otherwise programatically indicate that Storybook has started. A composed Storybook should not start until the child Storybooks are running. But using scripts like `concurrently` or `npm-run-all` has not consistently worked for me _when the parent/composed Storybook instance is in the list of scripts running concurrently_.\n\nOf course, you can open a new tab/terminal window for each command, but that means all users of your repo need to know that trick too. Inefficient!\n\nThe following is a solution that works consistently with a single NPM script.\n\n## Example code \n\n### Astro's Kitchen Sink\n\nWe'll be using Astro's [Kitchen Sink: Microfrontends with Astro](https://github.com/withastro/astro/tree/latest/examples/framework-multiple), which showcases Astro's built-in support for multiple frameworks (React, Preact, Svelte, and Vue (`v3.x`)). This a multi-framework application, meaning it can use components from multiple JS frameworks in the UI - very cool!\n\n### StoryDocker-storybook\n\nWe'll be adding [StoryDocker](https://github.com/storydocker/storydocker)'s module [StoryDocker-storybook](https://www.npmjs.com/package/storydocker-storybook) which injects the typical dependencies needed to set up Storybook. \n\n### Working codebase on GitHub\n\nThe code referenced is available on GitHub via [the astro-framework-multiple example](https://github.com/storydocker/storydocker-examples/tree/main/experimental/astro-framework-multiple) in the StoryDocker-examples repo.\n\n\n## Steps to compose Storybooks locally\n\n### Step 1: Start up the child Storybook(s) in parallel\n\nWe'll be using `concurrently`, an NPM module which allows running multiple commands at the same time. ([Concurrently on npmjs](https://www.npmjs.com/package/concurrently))\n\nThe child Storybooks don't need to know each other exist, so they can be started at the same time.\n\nUsing `concurrently`, we'll run each child-Storybook in parallel. \n\n#### Step 1.a: Running one child Storybook\n\nThis command will run one child Storybook:\n\n`npm run storybook -- --config-dir .framework-storybooks/.storybook-preact --port 6001 --no-open`\n\nLet's break down that command:\n\n`npm run storybook` is the command to run Storybook via the NPM script `storybook` in `package.json`. That script is calling the [Storybook CLI](https://storybook.js.org/docs/react/api/cli-options) with the command `storybook dev`.\n\n`-- ` the extra double-dashes allow us to send flags-and-options directly to `storybook dev`\n\n`--config-dir .framework-storybooks/.storybook-preact` is the command to run Storybook with the `preact`-specific configuration found in the local directory\n\n`--port 6001` is the command to run Storybook on port `6001`\n\n`--no-open` tells Storybook to not open a browser window when it starts.\n\nSo, all that means we're starting a Storybook instance using the configuration found in `.framework-storybooks/.storybook-preact` and we're running it on port `6001` and telling Storybook to skip it's default behavior of opening a browser window.\n\n#### Step 1.b: The other child Storybooks\n\nThe example code has 3 other child Storybooks, so we'll need to run those too. They are:\n\nReact: `npm run storybook -- --config-dir .framework-storybooks/.storybook-react --port 6002 --no-open`\n\nSvelte: `npm run storybook -- --config-dir .framework-storybooks/.storybook-svelte --port 6003 --no-open`\n\nVue: `npm run storybook -- --config-dir .framework-storybooks/.storybook-vue --port 6004 --no-open`\n\n#### Step 1.c: Running all child Storybooks in parallel\n\nPutting them together, we'll run all the child Storybooks in parallel using `concurrently`. This is the NPM script we'll use:\n\n```JSON\n\"sbook-children\": \"npx concurrently \\\"npm run storybook -- --config-dir .framework-storybooks/.storybook-preact --port 6001 --no-open\\\"  \\\"npm run storybook -- --config-dir .framework-storybooks/.storybook-react --port 6002 --no-open\\\" \\\"npm run storybook -- --config-dir .framework-storybooks/.storybook-svelte --port 6003 --no-open\\\" \\\"npm run storybook -- --config-dir .framework-storybooks/.storybook-vue --port 6004 --no-open\\\"\",\n```\n\nRunning `npm run sbook-children` will start all the child Storybooks in parallel. We use `npx` instead of `npm` so we can avoid adding `concurrently` as a dependency.\n\n### Step 2: Run the parent Storybook\n\nWe do not want to start the parent Storybook until all the child Storybooks are running and viewable in browser.\n\n#### Step 2.a: The parent Storybook\n\nThe main composed Storybook is configured like a normal Storybook within the `.storybook` directory. The only addition is the [`refs.js` file](https://github.com/storydocker/storydocker-examples/blob/main/experimental/astro-framework-multiple/.storybook/refs.js) which is imported by `main.js` and contains the references to the child Storybooks. The contents of `refs.js` are:\n\n```\nexport default {\n  \"astro_preact\": {\n    \"title\": \"preact\",\n    \"url\": \"http://localhost:6001\",\n  },\n  \"astro_react\": {\n    \"title\": \"react\",\n    \"url\": \"http://localhost:6002\",\n  },\n  \"astro_svelte\": {\n    \"title\": \"svelte\",\n    \"url\": \"http://localhost:6003\",\n  },\n  \"astro_vue\": {\n    \"title\": \"vue\",\n    \"url\": \"http://localhost:6004\",\n  },\n}\n```\n\n#### Step 2.b: Waiting on one child Storybook\n\nWe'll use `wait-on`, an NPM module which stops Node from continuing a process until a condition is met. In this case, `wait-on` is going to check for each `localhost` port to be open before continuing. ([wait-on on npmjs](https://www.npmjs.com/package/wait-on))\n\nThis command: \n\n`npx wait-on http://localhost:6001`\n\nwill wait until `localhost:6001` is open and returns a `2xx` response before continuing. \n\nPort `6001` is the Storybook for Preact.\n\n#### Step 2.c: Waiting on all child Storybooks\n\nWe'll be adding a double-ampersand in between each localhost check, which means `wait-on` will wait for each port _sequentially_. After all the `wait-on`s, we'll start Storybook with `npm run storybook`.\n\nThe following NPM script will wait for all the child Storybooks to be open before continuing to open the parent Storybook.\n\n```JSON\n\"sbook-parent\": \"npx wait-on http://localhost:6001 && npx wait-on http://localhost:6002 && npx wait-on http://localhost:6003  && npx wait-on http://localhost:6004 && npm run storybook\",\n```\n\n### Step 3: Single command to run all Storybooks\n\nUsing `concurrently` again, we'll run both the child and parent NPM scripts:\n\n`npx concurrently \"npm run sbook-children\" \"npm run sbook-parent\"`\n\nand the NPM script in package.json:\n\n```JSON\n\"sbook\": \"npx concurrently \\\"npm run sbook-children\\\" \\\"npm run sbook-parent\\\"\"\n```\n\n### Step 4: Profit!\n\nHappy coding folks!",
  "user": {
    "name": "Scott Nath",
    "username": "scottnath",
    "twitter_username": null,
    "github_username": "scottnath",
    "user_id": 1055555,
    "website_url": "https://scottnath.com",
    "profile_image": "https://res.cloudinary.com/practicaldev/image/fetch/s--k0ZYTR18--/c_fill,f_auto,fl_progressive,h_640,q_auto,w_640/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/1055555/99c3a97d-b160-4d6d-96c1-1007d266c024.jpeg",
    "profile_image_90": "https://res.cloudinary.com/practicaldev/image/fetch/s--K8yLyVye--/c_fill,f_auto,fl_progressive,h_90,q_auto,w_90/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/1055555/99c3a97d-b160-4d6d-96c1-1007d266c024.jpeg"
  }
}