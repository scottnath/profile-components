{"version":3,"file":"user.stories-635fa5de.js","sources":["../../src/github/user/user.shared-spec.js","../../src/github/user/index.js"],"sourcesContent":["\nimport { expect } from '@storybook/jest';\nimport { within as shadowWithin } from 'shadow-dom-testing-library';\n\nimport { intToString } from '../../utils/index.js';\n\n/**\n * Extract elements from an shadow DOM element\n */\nexport const getElements = async (canvasElement) => {\n  const screen = shadowWithin(canvasElement);\n  const container = await screen.findByShadowLabelText(/GitHub user profile/i);\n  const [headerName] = await container?.querySelectorAll('[itemprop=\"alternativeName\"]');\n  const [mainLink] = await screen.queryAllByShadowRole('link');\n  const [ avatar ] = await screen.queryAllByShadowRole('img');\n  const [ bio ] = await container?.querySelectorAll('[itemprop=\"description\"]');\n  return { \n    screen,\n    canvasElement,\n    container,\n    error: await container?.querySelector('[itemprop=\"error\"]'),\n    headerName,\n    mainLink,\n    avatar,\n    name: await mainLink?.querySelector('[itemprop=\"name\"]'),\n    login: await mainLink?.querySelector('[itemprop=\"alternativeName\"]'),\n    bio,\n    followers: await container?.querySelector('[itemprop=\"followee\"]'),\n    following: await container?.querySelector('[itemprop=\"follows\"]'),\n    repos: await Array.from(container?.querySelectorAll('[itemscope].repo')),\n  };\n}\n\n/**\n * Ensure elements are present and have the correct content\n */\nexport const ensureElements = async (elements, args) => {\n  if (args.error) {\n    await expect(elements.mainLink).toBeFalsy();\n    await expect(elements.container).toBeTruthy();\n    await expect(elements.error).toBeTruthy();\n    await expect(elements.error).toHaveTextContent(args.error);\n    return;\n  }\n\n  await expect(elements.error).toBeFalsy();\n  await expect(elements.container).toBeTruthy();\n  await expect(elements.headerName).toBeTruthy();\n  await expect(elements.headerName).toHaveTextContent(args.login);\n  await expect(elements.mainLink).toBeTruthy();\n  await expect(elements.avatar).toBeTruthy();\n  await expect(elements.name).toBeTruthy();\n  await expect(elements.login).toBeTruthy();\n  \n  if (args?.bio) {\n    await expect(elements.bio).toBeTruthy();\n    await expect(elements.bio).toHaveTextContent(args.bio);\n  } else {\n    await expect(elements.bio).toBeFalsy();\n  }\n  if (args?.following) {\n    await expect(elements.following).toBeTruthy();\n    await expect(elements.following).toHaveTextContent(intToString(args.following));\n  } else {\n    await expect(elements.following).toBeFalsy();\n  }\n  if (args?.followers) {\n    await expect(elements.followers).toBeTruthy();\n    await expect(elements.followers).toHaveTextContent(intToString(args.followers));\n  } else {\n    await expect(elements.followers).toBeFalsy();\n  }\n  if (args?.repos) {\n    let reps = [];\n    try {\n      reps = parseify(args.repos);\n      await expect(elements.repos).toHaveLength(reps.length);\n    } catch (error) {\n      await expect(elements.repos).toHaveLength(0);\n    }\n  } else {\n    await expect(elements.repos).toHaveLength(0);\n  }\n}","import { generateUserContent } from './content.js';\nimport html from './html.js';\nimport { styles } from '../styles/index.js';\n\n/**\n * GitHub user profile web component\n * @summary Native web component which shows a GitHub user's profile content. Can use local data, \n *  fetch data from the GitHub rest API, or use a combination of both.\n * @element github-user\n * @name GitHubUser\n * @module\n * \n * @property {string} login - User's GitHub login\n * @property {string} avatar_url - URL to user's avatar\n * @property {string} name - User's name\n * @property {boolean} [fetch] - when true, fetches user from the [GitHub api](https://docs.github.com/en/rest/users/users#get-a-user)\n * @property {string} [username] - alias for `login`\n * @property {string} [bio] - User's biography content\n * @property {string} [following] - number of people user is following\n * @property {string} [followers] - number of followers\n * @property {string} [repos] - JSON stringified array of repositories\n * @property {string} [theme] - color theme for the component\n * \n * @example\n * <!-- import the web component -->\n * <script type=\"module\" src=\"https://unpkg.com/profile-components/dist/github-user.js\"></script>\n * \n * <!-- use the custom element -->\n * <github-user login=\"scottnath\" fetch=\"true\"></github-user>\n */\nexport class GitHubUser extends HTMLElement {\n  /**\n   * @ignore\n   */\n  constructor() {\n    super();\n    this.attrs = {};\n    this.content = {};\n    this.attachShadow({ mode: \"open\" });\n    this._getAttributes();\n  }\n\n  /**\n   * Generate variables at `this.[attribute-name]` for each attribute on the element\n   * @ignore\n   */\n  _getAttributes() {\n    for (let name of this.getAttributeNames()) {\n      if (this.getAttribute(name)) {\n        this.attrs[name] = this.getAttribute(name);\n      }\n    }\n  }\n\n  async connectedCallback() {\n    let view = `<style>${styles}</style>`;\n    this.content = await generateUserContent(this.attrs, this.attrs.fetch);\n    view += html(this.content);\n    this.shadowRoot.innerHTML = view;\n    if (this.attrs.theme) {\n      this.setAttribute('data-theme', this.attrs.theme);\n    }\n  }\n}\n\ncustomElements.define('github-user', GitHubUser);\n"],"names":["getElements","canvasElement","screen","shadowWithin","container","headerName","mainLink","avatar","bio","ensureElements","elements","args","expect","intToString","reps","cov_5aifbjuuf","path","hash","global","gcv","coverageData","coverage","actualCoverage","GitHubUser","HTMLElement","constructor","f","s","attrs","content","attachShadow","mode","_getAttributes","name","getAttributeNames","getAttribute","b","connectedCallback","view","styles","generateUserContent","fetch","html","shadowRoot","innerHTML","theme","setAttribute","customElements","define"],"mappings":"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KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,EAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,EAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,EAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,EAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,EAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,CAAA,EAAA,MAAA,CAAA,EAAA,CAAA,KAAA,gBAAA,KAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,IAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,KAAA,EAAA,EAAA,EAAA,CAAA,KAAA,gBAAA,KAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,IAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,KAAA,EAAA,EAAA,EAAA,CAAA,KAAA,geAAA,CAAA,QAAA,EAAA,QAAA,CAAA,kFAAA,EAAA,MAAA,CAAA,EAAA,SAAA,orVAAA,EAAA,gBAAA,2CAAA,KAAA,0CAAA,EAAAC,EAAAH,EAAAC,CAAA,IAAAD,EAAAC,CAAA,EAAA,CAAA,IAAA,CAAAE,EAAAL,CAAA,GAAAK,EAAAL,CAAA,EAAA,OAAAC,KAAAI,EAAAL,CAAA,EAAAI,GAAA,IAAAE,EAAAD,EAAAL,CAAA,EAAAD,OAAAA,EAAA,UAAA,CAAA,OAAAO,CAAA,EAAAA,CAAAP,CAAAA,IAeC,MAAAQ,WAAmBC,WAAY,CAI1CC,aAAc,CAAAV,EAAA,EAAAW,EAAA,CAAA,IAAAX,EAAA,EAAAY,EAAA,CAAA,IACZ,MAAK,EAAGZ,EAAA,EAAAY,EAAA,CAAA,IACR,KAAKC,MAAQ,CAAA,EAAGb,EAAA,EAAAY,EAAA,CAAA,IAChB,KAAKE,QAAU,GAAGd,IAAAY,EAClB,CAAA,IAAA,KAAKG,aAAa,CAAEC,KAAM,MAAO,CAAC,EAAEhB,IAAAY,EACpC,CAAA,IAAA,KAAKK,eAAc,CACrB,CAMAA,gBAAiB,CAAAjB,EAAAW,EAAAA,OAAAX,EAAA,EAAAY,EACf,CAAA,IAAA,QAASM,KAAY,KAACC,kBAAmB,EAAEnB,EAAA,EAAAY,EAAA,CAAA,IACrC,KAAKQ,aAAaF,CAAI,GAAGlB,EAAA,EAAAqB,UAAArB,EAAA,EAAAY,EAC3B,CAAA,IAAA,KAAKC,MAAMK,CAAI,EAAI,KAAKE,aAAaF,CAAI,GAC1ClB,EAAA,EAAAqB,SAEL,CAEA,MAAMC,mBAAoB,CAAAtB,EAAAW,EAAAA,OACxB,IAAIY,GAAIvB,EAAA,EAAAY,EAAA,CAAA,IAAI,UAASY,EAAO,YAAUxB,EAAA,EAAAY,EACtC,CAAA,IAAA,KAAKE,QAAU,MAAMW,GAAoB,KAAKZ,MAAO,KAAKA,MAAMa,KAAK,EAAE1B,EAAA,EAAAY,QACvEW,GAAQI,GAAK,KAAKb,OAAO,EAAEd,EAAA,EAAAY,EAC3B,EAAA,IAAA,KAAKgB,WAAWC,UAAYN,EAAKvB,EAAA,EAAAY,EACjC,EAAA,IAAI,KAAKC,MAAMiB,OAAO9B,EAAA,EAAAqB,EAAArB,CAAAA,EAAAA,CAAAA,IAAAA,IAAAY,EAAA,EAAA,IACpB,KAAKmB,aAAa,aAAc,KAAKlB,MAAMiB,KAAK,GACjD9B,EAAAqB,EAAAA,SACH,CACF,CAACrB,EAAA,EAAAY,QAEDoB,eAAeC,OAAO,cAAezB,EAAU;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"}