{"version":3,"file":"dsd.stories-c8fb85fe.js","sources":["../../src/devto/index.js","../../src/devto/dsd.docs.mdx"],"sourcesContent":["/**\n * @name DEV-Utilities\n * @kind module\n * @typicalname devUtils\n * @namespace DEVUtils\n * @description Utility functions for fetching and parsing dev.to api data, getting\n *  styles and generating HTML for dev.to profile UIs\n * @author @scottnath\n */\nimport {styles} from './styles/index.js';\nimport {generateUserContent} from './user/content.js';\nimport userHTML from './user/html.js';\nimport {generatePostContent} from './post/content.js';\nimport postHTML from './post/html.js';\n\n/**\n * @name DEV-Post-Declarative-Shadow-DOM\n * @param {ForemPostHTML} content - Content about one post by dev.to (or Forem) user\n * @param {boolean} fetch \n * @returns {string} DEV post HTML wrapped in a `template`\n * @function\n * @memberof DEVUtils.post\n * @namespace dsd\n * @description Generate a `template` element with a shadowdom with a Post in it\n * \n * @example <caption>Server side rendering a post with Declarative Shadow Dom</caption>\n * <devto-post></devto-post>\n * \n * <script type=\"module\">\n * import {post} from 'profile-components/devto-utils';\n * const dsdHTML = post.dsd({id: '12345'}, true);\n * document.querySelector('devto-post').innerHTML = dsdHTML;\n * </script>\n */\nconst dsdPost = async (content, fetch = false) => {\n  const generated = await generatePostContent(content, fetch);\n  let genHTML = '<template shadowrootmode=\"open\"><style>' + styles + '</style>';\n  genHTML += postHTML(generated);\n  genHTML += '</template>';\n  return genHTML;\n}\n\n/**\n * @name DEV-Post-Utilities\n * @module\n * @namespace post\n * @memberof DEVUtils\n * @description Utility functions for a post\n */\nconst post = {\n  generateContent: generatePostContent,\n  html: postHTML,\n  styles,\n  dsd: dsdPost\n};\n\n/**\n * @name DEV-Declarative-Shadow-DOM\n * @namespace dsd\n * @param {ForemUserHTML} content - a content object representing a DEV user\n * @param {boolean} fetch \n * @returns {string} DEV HTML wrapped in a `template`\n * @function\n * @memberof DEVUtils.user\n * @description Generate a `template` element with shadowrootmode with a User in it\n * \n * @example <caption>Server side rendering with Declarative Shadow Dom</caption>\n * <devto-user></devto-user>\n * \n * <script type=\"module\">\n * import {dsd} from 'profile-components/devto-utils';\n * const dsdHTML = dsd({username: 'scottnath'}, true);\n * document.querySelector('devto-user').innerHTML = dsdHTML;\n * </script>\n */\nconst dsd = async (content, fetch = false) => {\n  const generated = await generateUserContent(content, fetch);\n  let genHTML = '<template shadowrootmode=\"open\"><style>' + styles + '</style>';\n  genHTML += userHTML(generated);\n  genHTML += '</template>';\n  return genHTML;\n}\n\n/**\n * @name DEV-User-Utilities\n * @module\n * @namespace user\n * @memberof DEVUtils\n * @description Utility functions for a user\n */\nconst user = {\n  generateContent: generateUserContent,\n  html: userHTML,\n  styles,\n  dsd\n};\n\nexport {\n  post,\n  user,\n  dsd,\n}","import { Meta, Title, Source } from '@storybook/blocks';\n\n<Meta isTemplate />\n\n<Title />\n\nBoth DEV components can be implemented via Declarative Shadow DOM using methods exported from the `devto-utils.js` file.\n\n\n## Server Side Rendering HTML in Node.js\n\n<Source code={`\n// import from npm module\nimport { dsd } from 'profile-components/devto-utils';\n\nconst generatedTemplate = await dsd({\n  username: 'scottnath',\n},true);\n\n/**\ngeneratedTemplate contains:\n<template shadowrootmode=\"open\">\n  <styles>(...css styles for DEV component)</styles>\n  <section (...rest of generated HTML)</section>\n</template>\n*/\n\nconst componentHTML = \\`<devto-user>\\${generatedTemplate}</devto-user>\\`;\n`} language='js' />\n\n## Server side render in an Astro component\n\n<Source code={`\n---\nimport {dsd} from 'profile-components/devto-utils';\n\nconst declaredDOM = await dsd({\n  username: 'scottnath',\n},true)\n---\n\n<devto-user\n  data-theme=\"light_high_contrast\"\n  set:html={declaredDOM}>\n</devto-user>\n`} language='jsx' />\n\n## Client side rendering via unpkg\n\n<Source code={`\n\n<!-- add empty elements to HTML -->\n<devto-post></devto-post>\n<hr />\n<devto-user></devto-user>\n\n<script type=\"module\">\n  // import from unpkg\n  import {\n    user,\n    post,\n  } from 'https://unpkg.com/profile-components/dist/devto-utils.js';\n\n  // post has it's own DSD method:\n  const dsdPost = post.dsd;\n\n  /**\n    * Polyfill for Declarative Shadow DOM which, when triggered, converts\n    *  the template element into actual shadow DOM.\n    * This is only needed when injecting _after_ page is loaded\n    * @see https://developer.chrome.com/docs/css-ui/declarative-shadow-dom#polyfill\n    */\n  const triggerAttachShadowRoots = () => {\n    (function attachShadowRoots(root) {\n      root\n        .querySelectorAll('template[shadowrootmode]')\n        .forEach((template) => {\n          const mode = template.getAttribute('shadowrootmode');\n          const shadowRoot = template.parentNode.attachShadow({ mode });\n          shadowRoot.appendChild(template.content);\n          template.remove();\n          attachShadowRoots(shadowRoot);\n        });\n    })(document);\n  };\n\n  /**\n    * Uses the \"dsd\" method to generate DSD, add the string of DSD content\n    *  to the element, then trigger the polyfill to convert the template\n    */\n  const injectDSD = async () => {\n    const dsdHTML = await dsd({ username: 'scottnath' }, true);\n    document.querySelector('devto-user').innerHTML = dsdHTML;\n    // now that the HTML is async-created, the polyfill can convert it\n    triggerAttachShadowRoots();\n  };\n  injectDSD();\n\n  /**\n    * Uses the \"dsdPost\" method to generate DSD, add the string of DSD content\n    *  to the element, then trigger the polyfill to convert the template\n    */\n  const injectPostDSD = async () => {\n    const dsdHTML = await dsdPost(\n      { full_name: 'scottnath/profile-components' },\n      true\n    );\n    document.querySelector('devto-post').innerHTML = dsdHTML;\n    // now that the HTML is async-created, the polyfill can convert it\n    triggerAttachShadowRoots();\n  };\n  injectPostDSD();\n</script>\n`} language='html' />\n"],"names":["cov_fjyar6gxa","path","hash","global","gcv","coverageData","coverage","actualCoverage","s","dsdPost","content","fetch","b","f","generated","generatePostContent","genHTML","styles","postHTML","post","generateContent","html","dsd","generateUserContent","userHTML","_createMdxContent","props","_components","_provideComponents","_jsxs","_Fragment","_jsx","Meta","Title","Source","MDXContent","MDXLayout"],"mappings":"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"}